name: Python CI
description: 'Builds, tests, and pushes a Python image using a requirements.txt for dependency installation'

inputs:
  github_token:
    description: 'Automatically created token. Set this to the GITHUB_TOKEN secret'
    required: true
  gitleaks_token:
    description: 'Organisational token for Gitleaks'
    required: false # only required for Organizations, not personal accounts
  source_dir:
    description: 'Source directory for the python application'
    required: true
  pytest_coverage_xml_file_name:
    description: 'PyTest coverage report path'
    required: false
    default: 'coverage-reports/coverage-pytest.xml'
  pytest_coverage_threshold_percent:
    description: 'Fails if coverage is under this percent'
    required: false
    default: 50

runs:
  using: 'composite'
  steps:



    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0   

    - name: Validate conventional commits
      uses: wagoid/commitlint-github-action@v6    

    - name: Scan for secrets
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        GITLEAKS_LICENSE: ${{ inputs.gitleaks_token }}

    - name: Set up Python
      uses: actions/setup-python@v5
      id: setup_python
      with:
        python-version-file: ".python-version"
        cache: pip

    - name: Install dependencies from requirements.txt and pyproject.toml, as well as pytest and pytest-cov
      run: |
        ls | grep -q 'requirements.txt' && pip install requirements.txt
        ls | grep -q 'pyproject.toml' && grep -q 'test' pyproject.toml && pip install .[test]
        grep -q 'pytest' pyproject.toml || pip install pytest
        grep -q 'pytest-cov' pyproject.toml || pip install pytest-cov
        grep -q 'bandit' pyproject.toml || pip install bandit
        grep -q 'mypy' pyproject.toml || pip install mypy
      shell: bash

    - name: "Run scanner"
      uses: google/osv-scanner-action/osv-scanner-action@19734b480e0819e9fe058cb345d77fa08c55189f # v2.0.1
      with:
        scan-args: |-
          --output=results.json
          --format=json
          -r
          ${{ inputs.source_dir }}/
      continue-on-error: true
    - name: "Run osv-scanner-reporter"
      uses: google/osv-scanner-action/osv-reporter-action@19734b480e0819e9fe058cb345d77fa08c55189f # v2.0.1
      with:
        scan-args: |-
          --output=results.sarif
          --new=results.json
          --gh-annotations=true
          --fail-on-vuln=true
    - name: "Upload artifact"
      id: "upload_artifact"
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: SARIF file
        path: results.sarif
        retention-days: 5

    - name: Check Format with Black
      uses: psf/black@stable
      with:
        options: "--check --verbose --diff"
        src: "./${{ inputs.source_dir }}"

    - name: Error, Style Lint and Complexity Analysis with flake8
      shell: bash
      # with below, flake8 will run on ALL directories within $source_dir
      # to exclude directories, edit .flake8
      run: |
        # flake8 - stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # flake8 - exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Parse PyTest coverage xml file name option
      shell: bash
      if: ${{ inputs.pytest_coverage_xml_file_name }} != ''
      run: |
        echo "pytest_report_name_options=$(echo '--cov-report=xml:${{ inputs.pytest_coverage_xml_file_name }} --cov-report=term-missing:skip-covered')" >> $GITHUB_ENV

    - name: Parse PyTest coverage fail percent option
      shell: bash
      if: ${{ inputs.pytest_coverage_threshold_percent }} != 0
      run: |
        echo "pytest_fail_percent_options=$(echo '--cov-fail-under=${{ inputs.pytest_coverage_threshold_percent }}')" >> $GITHUB_ENV

    - name: Test with PyTest
      shell: bash
      run: |
        pytest --cov=${{ inputs.source_dir }} ${{ env.pytest_report_name_options }} ${{ env.pytest_fail_percent_options }}

    - name: Type Check with Mypy
      shell: bash
      run: |
        mypy ${{ inputs.source_dir }}

    - name: Security Lint with Bandit
      shell: bash
      run: |
        # bandit - log level low, critical issues only. Reports only if high confidence
        bandit -ll -ii -r . -x ./.venv

    - name: Override Coverage Source Path for Sonar
      # needed for converting pytest coverage to sonarcloud formatting, details here:
      # https://copdips.com/2023/01/sonarcloud-github-action.html#file-githubworkflowsciyml
      if: ${{ inputs.pytest_coverage_xml_file_name }} != ''
      shell: bash
      run: |
        sed -i 's@'$GITHUB_WORKSPACE'@/github/workspace/@g' $GITHUB_WORKSPACE/${{ inputs.pytest_coverage_xml_file_name }}

    - name: Install Semgrep
      run: pip install semgrep
      shell: bash
    - name: Run Semgrep scan and output to Github Security
      working-directory: ${{ inputs.source_dir }}
      run: semgrep scan --sarif -o ${{ github.workspace }}/semgrep-output.sarif --oss-only 
      shell: bash
    - name: Upload SARIF report to GitHub (even if previous step failed)
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: semgrep-output.sarif
        category: semgrep
        
    - name: Run Semgrep scan and fail on issues
      working-directory: ${{ inputs.source_dir }}
      run: semgrep scan --severity ERROR --severity WARNING --oss-only --json-output=semgrep 
      shell: bash
    - name: Add semgrep output to action summary
      working-directory: ${{ inputs.source_dir }}
      run: |
        node .github/actions/build/semgrep.js >> $GITHUB_STEP_SUMMARY
      shell: bash
